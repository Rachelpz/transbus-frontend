<html lang="#{languageBean.localeCode}"
      xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:f="http://java.sun.com/jsf/core"
      xmlns:ui="http://java.sun.com/jsf/facelets"
      xmlns:p="http://primefaces.org/ui">

<f:view locale="#{languageBean.locale}">
    <ui:composition template="/pages/template/layout.xhtml">
        <ui:define name="title">
            #{msgs.title_listContracts}
        </ui:define>
        <ui:define name="layout">
            <h:form id="form">
                <div class="card crud-demo">
                    <p:toolbar>
                        <p:toolbarGroup>
                            <!--
                            * La propiedad action y actionListener de los botones apunta a un method en el bean de jsf, ese method
                              por lo general es de tipo void porque se está trabajando con AJAX.
                            * La propiedad update permite refrescar componentes luego de ejecutarse el code definido en el action. Si son varios
                              componente poner los Ids separados por coma.
                            * La propiedad onComplete ejecuta un code en Javascript una vez finalizada el action del button. También es posible ejecutar
                              code en Javascript desde el bean de Jsf
                            -->
                            <p:commandButton value="#{msgs.btn_new}" icon="pi pi-plus"
                                             actionListener="#{manageContractBean.openNew}"
                                             update=":form:manage-contract-content"
                                             oncomplete="PF('manageContractDialog').show()"
                                             styleClass="ui-button-success" style="margin-right: .5rem">
                                <p:resetInput target=":form:manage-contract-content" />
                            </p:commandButton>
                        </p:toolbarGroup>
                        <p:toolbarGroup align="right">
                            <!-- Este es un button que tiene como objetivo exportar el contenido de la tabla que apunta a propiedad target
                                 del componente dataExporter. En este caso dt-users es el identificador del componente datatable -->
                            <p:commandButton value="#{msgs.btn_export}" icon="pi pi-upload"
                                             styleClass="ui-button-help" ajax="false">
                                <p:dataExporter type="pdf" target="dt-contracts" fileName="contracts" />
                            </p:commandButton>
                        </p:toolbarGroup>
                    </p:toolbar>

                    <!-- Componente usado para mostrar tablas con datos y ejecutar operaciones
                        * La propiedad value: apunta a una lista de objetos de tipo UserDto que está en el bean de jsf
                        * La propiedad var: es una instancia de esta lista para poder extaer los objetos, es como iterador
                          que luego permite poder decir user.<propiedad del objeto>.
                        * La propiedad paginator: define si se quiere paginar o no y es posible definir la position del mismo usando
                          la propiedad pagePosition.
                        * La propiedad rows: define la cantidad de filas
                        * El facet header define un encabezado y agrega un button para filtrar. Por defecto esto lo hace el solo, si quieren algo
                          con mayor detalle ver el showcase.
                     -->
                    <p:dataTable id="dt-contracts" widgetVar="dtContracts" var="contract"
                                 value="#{manageContractBean.contracts}" reflow="true" paginator="true"
                                 rows="10" paginatorPosition="bottom">
                        <f:facet name="header">
                            <div class="products-table-header">
                                <span style="font-weight: bold">#{msgs.label_contractRs}</span> <span
                                    class="filter-container ui-input-icon-left"> <i
                                    class="pi pi-search"></i> <p:inputText id="globalFilter"
                                                                           onkeyup="PF('dtContracts').filter()" placeholder="#{msgs.input_searh}" />
							</span>
                            </div>
                        </f:facet>

                        <p:column headerText="#{msgs.header_start}" sortBy="#{contract.start_date.toInstant().toString().substring(0,10)}" filterBy="#{contract.start_date.toInstant().toString().substring(0,10)}">
                            <h:outputText value="#{contract.start_date.toInstant().toString().substring(0,10)}" />
                        </p:column>
                        <p:column headerText="#{msgs.header_end}" sortBy="#{contract.end_date.toInstant().toString().substring(0,10)}" filterBy="#{contract.end_date.toInstant().toString().substring(0,10)}">
                            <h:outputText value="#{contract.end_date.toInstant().toString().substring(0,10)}" />
                        </p:column>
                        <p:column headerText="#{msgs.header_traveled}" sortBy="#{contract.km_traveled}" filterBy="#{contract.km_traveled}">
                            <h:outputText value="#{contract.km_traveled}" />
                        </p:column>
                        <p:column headerText="#{msgs.label_request}" sortBy="#{contract.request.request_name}" filterBy="#{contract.request.request_name}">
                            <h:outputText value="#{contract.request.request_name}" />
                        </p:column>
                        <p:column headerText="#{msgs.header_amountCharged}" sortBy="#{contract.amount_charged}" filterBy="#{contract.amount_charged}">
                            <h:outputText value="#{contract.amount_charged}" />
                        </p:column>

                        <p:column exportable="false">
                            <p:commandButton icon="pi pi-pencil" action="#{manageContractBean.openForEdit}"
                                             update=":form:manage-contract-content"
                                             oncomplete="PF('manageContractDialog').show()"
                                             styleClass="edit-button rounded-button ui-button-success"
                                             process="@this">
                                <f:setPropertyActionListener value="#{contract}"
                                                             target="#{manageContractBean.selectedContract}" />
                                <p:resetInput target=":form:manage-contract-content" />
                            </p:commandButton>
                            <p:commandButton class="ui-button-warning rounded-button"
                                             icon="pi pi-trash" process="@this"
                                             action="#{manageContractBean.deleteContract}" >
                                <f:setPropertyActionListener value="#{contract}"
                                                             target="#{manageContractBean.selectedContract}" />
                                <p:confirm header="#{msgs.header_confirm}" message="#{msgs.message_contract}"
                                           icon="pi pi-exclamation-triangle"/>
                            </p:commandButton>
                        </p:column>
                    </p:dataTable>

                    <!-- ui:include es una etiqueta de facelet que permite incluir pages y de esta forma el code no se carga tanto -->
                    <ui:include src="form_contract.xhtml"></ui:include>

                    <!-- Este comoponente se utiliza mucho para el caso de los eliminar, que es donde casi siempre se necesita confirmation,
                    su uso es bien sencillo, cada confirmDialog va atado a un p:confirm que es el que se definie dentro del button -->
                    <p:confirmDialog global="true" showEffect="fade" width="300">
                        <p:commandButton value="#{msgs.btn_yes}" type="button"
                                         styleClass="ui-confirmdialog-yes" icon="pi pi-check" />
                        <p:commandButton value="#{msgs.btn_no}" type="button"
                                         styleClass="ui-confirmdialog-no ui-button-secondary"
                                         icon="pi pi-times" />
                    </p:confirmDialog>
                </div>
            </h:form>
        </ui:define>
    </ui:composition>
</f:view>
</html>